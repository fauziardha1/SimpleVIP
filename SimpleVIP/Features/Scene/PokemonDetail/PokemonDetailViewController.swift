//
//  PokemonDetailViewController.swift
//  SimpleVIP
//
//  Created by Batm Admin on 22/02/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PokemonDetailDisplayLogic: class{
  func displayPokemonDetail(viewModel: PokemonDetail.FetchDetail.ViewModel)
    func displayPokemonUpdateName(viewModel: PokemonDetail.FetchDetail.ViewModel)
}

class PokemonDetailViewController: UIViewController, PokemonDetailDisplayLogic
{
  var interactor: PokemonDetailBusinessLogic?
  var router: (NSObjectProtocol & PokemonDetailRoutingLogic & PokemonDetailDataPassing)?
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = PokemonDetailInteractor()
    let presenter = PokemonDetailPresenter()
    let router = PokemonDetailRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    }
    
    convenience init() {
        self.init(nibName: nil, bundle: nil)
        setup()
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
  override func viewDidLoad()
  {
    super.viewDidLoad()
      view.backgroundColor = .systemYellow
    
    fetchPokemonDetail()
      view.addSubview(label)
      view.addSubview(button)
      
      NSLayoutConstraint.activate([
        label.centerXAnchor.constraint(equalTo: view.centerXAnchor),
        label.centerYAnchor.constraint(equalTo: view.centerYAnchor),
        
        button.centerXAnchor.constraint(equalTo: view.centerXAnchor),
        button.topAnchor.constraint(equalTo: label.bottomAnchor, constant: 12),
        button.widthAnchor.constraint(equalToConstant: 120),
        button.heightAnchor.constraint(equalToConstant: 40),
      ])
    
  }
  
  // MARK: fetch pokemon detail
  func fetchPokemonDetail(){
    let request = PokemonDetail.FetchDetail.Request()
    interactor?.fetchPokemonDetail(request: request)
  }
  
  func displayPokemonDetail(viewModel: PokemonDetail.FetchDetail.ViewModel)
  {
    //nameTextField.text = viewModel.name
      print(viewModel.pokemonDetail.abilites)
      DispatchQueue.main.async {
          self.label.text = viewModel.pokemonDetail.name
      }
  }
    
    lazy var label: UILabel = {
        let label = UILabel()
        label.translatesAutoresizingMaskIntoConstraints = false
        label.text = ""
        label.font = .systemFont(ofSize: 48, weight: .bold)
        label.numberOfLines = 0
        return label
    }()
    
    lazy var button: UIButton = {
        let button = UIButton()
        button.translatesAutoresizingMaskIntoConstraints = false
        button.setTitle("Change to A", for: .normal)
        button.backgroundColor = .systemBlue
        button.tintColor = .white
        button.layer.cornerRadius = 12
        button.addTarget(self, action: #selector(updateCurrentPokemon), for: .touchUpInside)
        return button
    }()
    
    @objc func updateCurrentPokemon(){
        let request = PokemonDetail.UpdateName.Request(name: "A")
        self.interactor?.changePokemonName(reques: request)
        self.router?.routeToListPokemon()
    }
    
    func displayPokemonUpdateName(viewModel: PokemonDetail.FetchDetail.ViewModel) {
        DispatchQueue.main.async {
            self.label.text = viewModel.pokemonDetail.name
        }
    }
}
