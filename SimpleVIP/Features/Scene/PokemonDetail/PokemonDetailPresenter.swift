//
//  PokemonDetailPresenter.swift
//  SimpleVIP
//
//  Created by Batm Admin on 22/02/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PokemonDetailPresentationLogic
{
  func presentPokemonDetail(response: PokemonDetail.FetchDetail.Response)
    func presentPokemonUpdateName(response: PokemonDetail.FetchDetail.Response)
}

class PokemonDetailPresenter: PokemonDetailPresentationLogic
{
  weak var viewController: PokemonDetailDisplayLogic?
  
  // MARK: Do something
  
  func presentPokemonDetail(response: PokemonDetail.FetchDetail.Response)
  {
      var moves = [String]()
      var abilities = [String]()
      var types = [String]()
      
      for move in response.data.moves{
          moves.append(move.move.name)
      }
      for ability in response.data.abilities {
          abilities.append(ability.ability.name)
      }
      for type in response.data.types {
          types.append(type.type.name)
      }
      
      let detail = PokemonDetail.FetchDetail.ViewModel.DisplayPokemonDetail(
        name: response.data.name,
        id: response.data.id,
        height: response.data.height,
        moves: moves,
        abilites: abilities,
        species: response.data.species.name,
        types: types,
        weight: response.data.weight)
      
      let viewModel = PokemonDetail.FetchDetail.ViewModel(pokemonDetail: detail)
     viewController?.displayPokemonDetail(viewModel: viewModel)
  }
    
    func presentPokemonUpdateName(response: PokemonDetail.FetchDetail.Response) {
        var moves = [String]()
        var abilities = [String]()
        var types = [String]()
        
        for move in response.data.moves{
            moves.append(move.move.name)
        }
        for ability in response.data.abilities {
            abilities.append(ability.ability.name)
        }
        for type in response.data.types {
            types.append(type.type.name)
        }
        
        let detail = PokemonDetail.FetchDetail.ViewModel.DisplayPokemonDetail(
          name: response.data.name,
          id: response.data.id,
          height: response.data.height,
          moves: moves,
          abilites: abilities,
          species: response.data.species.name,
          types: types,
          weight: response.data.weight)
        
        let viewModel = PokemonDetail.FetchDetail.ViewModel(pokemonDetail: detail)
        viewController?.displayPokemonDetail(viewModel: viewModel)
    }
}
